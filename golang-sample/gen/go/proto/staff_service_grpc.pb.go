// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// StaffServiceV1Client is the client API for StaffServiceV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffServiceV1Client interface {
	ListStaffV1(ctx context.Context, in *ListStaffV1Request, opts ...grpc.CallOption) (*ListStaffV1Response, error)
	CreateStaffV1(ctx context.Context, in *CreateStaffV1Request, opts ...grpc.CallOption) (*CreateStaffV1Response, error)
	GetStaffV1(ctx context.Context, in *GetStaffV1Request, opts ...grpc.CallOption) (*GetStaffV1Response, error)
	PatchStaffV1(ctx context.Context, in *PatchStaffV1Request, opts ...grpc.CallOption) (*PatchStaffV1Response, error)
	DeleteStaffV1(ctx context.Context, in *DeleteStaffV1Request, opts ...grpc.CallOption) (*DeleteStaffV1Response, error)
}

type staffServiceV1Client struct {
	cc grpc.ClientConnInterface
}

func NewStaffServiceV1Client(cc grpc.ClientConnInterface) StaffServiceV1Client {
	return &staffServiceV1Client{cc}
}

func (c *staffServiceV1Client) ListStaffV1(ctx context.Context, in *ListStaffV1Request, opts ...grpc.CallOption) (*ListStaffV1Response, error) {
	out := new(ListStaffV1Response)
	err := c.cc.Invoke(ctx, "/proto.StaffServiceV1/ListStaffV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceV1Client) CreateStaffV1(ctx context.Context, in *CreateStaffV1Request, opts ...grpc.CallOption) (*CreateStaffV1Response, error) {
	out := new(CreateStaffV1Response)
	err := c.cc.Invoke(ctx, "/proto.StaffServiceV1/CreateStaffV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceV1Client) GetStaffV1(ctx context.Context, in *GetStaffV1Request, opts ...grpc.CallOption) (*GetStaffV1Response, error) {
	out := new(GetStaffV1Response)
	err := c.cc.Invoke(ctx, "/proto.StaffServiceV1/GetStaffV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceV1Client) PatchStaffV1(ctx context.Context, in *PatchStaffV1Request, opts ...grpc.CallOption) (*PatchStaffV1Response, error) {
	out := new(PatchStaffV1Response)
	err := c.cc.Invoke(ctx, "/proto.StaffServiceV1/PatchStaffV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffServiceV1Client) DeleteStaffV1(ctx context.Context, in *DeleteStaffV1Request, opts ...grpc.CallOption) (*DeleteStaffV1Response, error) {
	out := new(DeleteStaffV1Response)
	err := c.cc.Invoke(ctx, "/proto.StaffServiceV1/DeleteStaffV1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServiceV1Server is the server API for StaffServiceV1 service.
// All implementations must embed UnimplementedStaffServiceV1Server
// for forward compatibility
type StaffServiceV1Server interface {
	ListStaffV1(context.Context, *ListStaffV1Request) (*ListStaffV1Response, error)
	CreateStaffV1(context.Context, *CreateStaffV1Request) (*CreateStaffV1Response, error)
	GetStaffV1(context.Context, *GetStaffV1Request) (*GetStaffV1Response, error)
	PatchStaffV1(context.Context, *PatchStaffV1Request) (*PatchStaffV1Response, error)
	DeleteStaffV1(context.Context, *DeleteStaffV1Request) (*DeleteStaffV1Response, error)
	mustEmbedUnimplementedStaffServiceV1Server()
}

// UnimplementedStaffServiceV1Server must be embedded to have forward compatible implementations.
type UnimplementedStaffServiceV1Server struct {
}

func (UnimplementedStaffServiceV1Server) ListStaffV1(context.Context, *ListStaffV1Request) (*ListStaffV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListStaffV1 not implemented")
}
func (UnimplementedStaffServiceV1Server) CreateStaffV1(context.Context, *CreateStaffV1Request) (*CreateStaffV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateStaffV1 not implemented")
}
func (UnimplementedStaffServiceV1Server) GetStaffV1(context.Context, *GetStaffV1Request) (*GetStaffV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffV1 not implemented")
}
func (UnimplementedStaffServiceV1Server) PatchStaffV1(context.Context, *PatchStaffV1Request) (*PatchStaffV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PatchStaffV1 not implemented")
}
func (UnimplementedStaffServiceV1Server) DeleteStaffV1(context.Context, *DeleteStaffV1Request) (*DeleteStaffV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteStaffV1 not implemented")
}
func (UnimplementedStaffServiceV1Server) mustEmbedUnimplementedStaffServiceV1Server() {}

// UnsafeStaffServiceV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServiceV1Server will
// result in compilation errors.
type UnsafeStaffServiceV1Server interface {
	mustEmbedUnimplementedStaffServiceV1Server()
}

func RegisterStaffServiceV1Server(s grpc.ServiceRegistrar, srv StaffServiceV1Server) {
	s.RegisterService(&_StaffServiceV1_serviceDesc, srv)
}

func _StaffServiceV1_ListStaffV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListStaffV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceV1Server).ListStaffV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaffServiceV1/ListStaffV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceV1Server).ListStaffV1(ctx, req.(*ListStaffV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServiceV1_CreateStaffV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateStaffV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceV1Server).CreateStaffV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaffServiceV1/CreateStaffV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceV1Server).CreateStaffV1(ctx, req.(*CreateStaffV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServiceV1_GetStaffV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStaffV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceV1Server).GetStaffV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaffServiceV1/GetStaffV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceV1Server).GetStaffV1(ctx, req.(*GetStaffV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServiceV1_PatchStaffV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PatchStaffV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceV1Server).PatchStaffV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaffServiceV1/PatchStaffV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceV1Server).PatchStaffV1(ctx, req.(*PatchStaffV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _StaffServiceV1_DeleteStaffV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteStaffV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServiceV1Server).DeleteStaffV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.StaffServiceV1/DeleteStaffV1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServiceV1Server).DeleteStaffV1(ctx, req.(*DeleteStaffV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _StaffServiceV1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.StaffServiceV1",
	HandlerType: (*StaffServiceV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListStaffV1",
			Handler:    _StaffServiceV1_ListStaffV1_Handler,
		},
		{
			MethodName: "CreateStaffV1",
			Handler:    _StaffServiceV1_CreateStaffV1_Handler,
		},
		{
			MethodName: "GetStaffV1",
			Handler:    _StaffServiceV1_GetStaffV1_Handler,
		},
		{
			MethodName: "PatchStaffV1",
			Handler:    _StaffServiceV1_PatchStaffV1_Handler,
		},
		{
			MethodName: "DeleteStaffV1",
			Handler:    _StaffServiceV1_DeleteStaffV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "staff_service.proto",
}
