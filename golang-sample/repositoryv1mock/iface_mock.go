// Code generated by MockGen. DO NOT EDIT.
// Source: ./repositoryv1/iface.go

// Package repositoryv1mock is a generated GoMock package.
package repositoryv1mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domainv1 "github.com/lovemew67/public-misc/golang-sample/domainv1"
	proto "github.com/lovemew67/public-misc/golang-sample/gen/go/proto"
)

// MockStaffV1Repository is a mock of StaffV1Repository interface.
type MockStaffV1Repository struct {
	ctrl     *gomock.Controller
	recorder *MockStaffV1RepositoryMockRecorder
}

// MockStaffV1RepositoryMockRecorder is the mock recorder for MockStaffV1Repository.
type MockStaffV1RepositoryMockRecorder struct {
	mock *MockStaffV1Repository
}

// NewMockStaffV1Repository creates a new mock instance.
func NewMockStaffV1Repository(ctrl *gomock.Controller) *MockStaffV1Repository {
	mock := &MockStaffV1Repository{ctrl: ctrl}
	mock.recorder = &MockStaffV1RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStaffV1Repository) EXPECT() *MockStaffV1RepositoryMockRecorder {
	return m.recorder
}

// CountTotalStaff mocks base method.
func (m *MockStaffV1Repository) CountTotalStaff() (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountTotalStaff")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CountTotalStaff indicates an expected call of CountTotalStaff.
func (mr *MockStaffV1RepositoryMockRecorder) CountTotalStaff() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountTotalStaff", reflect.TypeOf((*MockStaffV1Repository)(nil).CountTotalStaff))
}

// CreateStaff mocks base method.
func (m *MockStaffV1Repository) CreateStaff(arg0 *proto.StaffV1) (*proto.StaffV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStaff", arg0)
	ret0, _ := ret[0].(*proto.StaffV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStaff indicates an expected call of CreateStaff.
func (mr *MockStaffV1RepositoryMockRecorder) CreateStaff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStaff", reflect.TypeOf((*MockStaffV1Repository)(nil).CreateStaff), arg0)
}

// DeleteStaff mocks base method.
func (m *MockStaffV1Repository) DeleteStaff(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStaff", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStaff indicates an expected call of DeleteStaff.
func (mr *MockStaffV1RepositoryMockRecorder) DeleteStaff(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStaff", reflect.TypeOf((*MockStaffV1Repository)(nil).DeleteStaff), arg0)
}

// GetStaff mocks base method.
func (m *MockStaffV1Repository) GetStaff(id string) (*proto.StaffV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStaff", id)
	ret0, _ := ret[0].(*proto.StaffV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStaff indicates an expected call of GetStaff.
func (mr *MockStaffV1RepositoryMockRecorder) GetStaff(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStaff", reflect.TypeOf((*MockStaffV1Repository)(nil).GetStaff), id)
}

// PatchStaff mocks base method.
func (m *MockStaffV1Repository) PatchStaff(arg0 string, arg1 *proto.StaffV1) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PatchStaff", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// PatchStaff indicates an expected call of PatchStaff.
func (mr *MockStaffV1RepositoryMockRecorder) PatchStaff(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PatchStaff", reflect.TypeOf((*MockStaffV1Repository)(nil).PatchStaff), arg0, arg1)
}

// QueryAllStaffWithOffsetAndLimit mocks base method.
func (m *MockStaffV1Repository) QueryAllStaffWithOffsetAndLimit(offset, limit int) ([]*proto.StaffV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryAllStaffWithOffsetAndLimit", offset, limit)
	ret0, _ := ret[0].([]*proto.StaffV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryAllStaffWithOffsetAndLimit indicates an expected call of QueryAllStaffWithOffsetAndLimit.
func (mr *MockStaffV1RepositoryMockRecorder) QueryAllStaffWithOffsetAndLimit(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryAllStaffWithOffsetAndLimit", reflect.TypeOf((*MockStaffV1Repository)(nil).QueryAllStaffWithOffsetAndLimit), offset, limit)
}

// MockJobV1Repository is a mock of JobV1Repository interface.
type MockJobV1Repository struct {
	ctrl     *gomock.Controller
	recorder *MockJobV1RepositoryMockRecorder
}

// MockJobV1RepositoryMockRecorder is the mock recorder for MockJobV1Repository.
type MockJobV1RepositoryMockRecorder struct {
	mock *MockJobV1Repository
}

// NewMockJobV1Repository creates a new mock instance.
func NewMockJobV1Repository(ctrl *gomock.Controller) *MockJobV1Repository {
	mock := &MockJobV1Repository{ctrl: ctrl}
	mock.recorder = &MockJobV1RepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJobV1Repository) EXPECT() *MockJobV1RepositoryMockRecorder {
	return m.recorder
}

// CancelTaskByID mocks base method.
func (m *MockJobV1Repository) CancelTaskByID(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelTaskByID", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelTaskByID indicates an expected call of CancelTaskByID.
func (mr *MockJobV1RepositoryMockRecorder) CancelTaskByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelTaskByID", reflect.TypeOf((*MockJobV1Repository)(nil).CancelTaskByID), id)
}

// Insert mocks base method.
func (m *MockJobV1Repository) Insert(job domainv1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", job)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockJobV1RepositoryMockRecorder) Insert(job interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockJobV1Repository)(nil).Insert), job)
}

// QueryReadyTask mocks base method.
func (m *MockJobV1Repository) QueryReadyTask() ([]domainv1.Job, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReadyTask")
	ret0, _ := ret[0].([]domainv1.Job)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// QueryReadyTask indicates an expected call of QueryReadyTask.
func (mr *MockJobV1RepositoryMockRecorder) QueryReadyTask() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReadyTask", reflect.TypeOf((*MockJobV1Repository)(nil).QueryReadyTask))
}

// RemoveFromTaskQueue mocks base method.
func (m *MockJobV1Repository) RemoveFromTaskQueue(task *domainv1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveFromTaskQueue", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveFromTaskQueue indicates an expected call of RemoveFromTaskQueue.
func (mr *MockJobV1RepositoryMockRecorder) RemoveFromTaskQueue(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveFromTaskQueue", reflect.TypeOf((*MockJobV1Repository)(nil).RemoveFromTaskQueue), task)
}

// UpdateProcessStatusToOngoing mocks base method.
func (m *MockJobV1Repository) UpdateProcessStatusToOngoing(id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProcessStatusToOngoing", id)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateProcessStatusToOngoing indicates an expected call of UpdateProcessStatusToOngoing.
func (mr *MockJobV1RepositoryMockRecorder) UpdateProcessStatusToOngoing(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProcessStatusToOngoing", reflect.TypeOf((*MockJobV1Repository)(nil).UpdateProcessStatusToOngoing), id)
}

// UpdateTaskStatusStillOngoing mocks base method.
func (m *MockJobV1Repository) UpdateTaskStatusStillOngoing(task *domainv1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatusStillOngoing", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatusStillOngoing indicates an expected call of UpdateTaskStatusStillOngoing.
func (mr *MockJobV1RepositoryMockRecorder) UpdateTaskStatusStillOngoing(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatusStillOngoing", reflect.TypeOf((*MockJobV1Repository)(nil).UpdateTaskStatusStillOngoing), task)
}

// UpdateTaskStatusToStopped mocks base method.
func (m *MockJobV1Repository) UpdateTaskStatusToStopped(task *domainv1.Job) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTaskStatusToStopped", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTaskStatusToStopped indicates an expected call of UpdateTaskStatusToStopped.
func (mr *MockJobV1RepositoryMockRecorder) UpdateTaskStatusToStopped(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTaskStatusToStopped", reflect.TypeOf((*MockJobV1Repository)(nil).UpdateTaskStatusToStopped), task)
}
