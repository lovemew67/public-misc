syntax = "proto3";

package proto;

option go_package = ".;proto";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  host: "localhost:9699";
  schemes: [
    HTTP
  ];
  info: {
    version: "1.0";
  };
  external_docs: {
    url: "https://github.com/lovemew67/public-misc/grpc-gateway-0";
    description: "gRPC-gateway 0";
  }
  security: {
    security_requirement: {
      key: "eid"
    }
    security_requirement: {
      key: "bearer"
    }
  }
  security_definitions: {
    security: {
      key: "eid"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "x-eid"
        description: "eid"
      }
    }
    security: {
      key: "bearer"
      value: {
        type: TYPE_API_KEY
        in: IN_HEADER
        name: "Authorization"
        description: "authorization token, prefixed by Bearer: Bearer <token>"
      }
    }
  }
};

service EchoService {
  rpc Echo(HiRequest) returns (HiResponse) {
    option (google.api.http) = {
      post: "/v1/echo"
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "echo service"
      description: "echo request message"
      tags: "echo"
      security: {} // disable security key, bearer token
    };
  }
}

message HiRequest {
  string message = 1;
  map<string, string> tracedata = 2;
}

message HiResponse {
  bool success = 1;
  string message = 2;
  map<string, string> tracedata = 3;
}
